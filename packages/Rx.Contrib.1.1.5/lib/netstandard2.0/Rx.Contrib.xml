<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rx.Contrib</name>
    </assembly>
    <members>
        <member name="T:Rx.Contrib.AsyncDisposable">
            <summary>
                Represents an asynchronous Func{Task}-based disposable and contains helpers methods to work with <see cref="T:Rx.Contrib.IAsyncDisposable"/>.
            </summary>
        </member>
        <member name="M:Rx.Contrib.AsyncDisposable.Create(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Creates a asynchronous disposable object that invokes the specified operation when disposed.
            </summary>
            <param name="disposeAsync">
                Operation to run during the first call to <see cref="M:Rx.Contrib.IAsyncDisposable.DisposeAsync"/>. 
                The operation is guaranteed to be run at most once.
            </param>
            <returns>
                The disposable object that runs the given function upon disposal.
            </returns>
        </member>
        <member name="M:Rx.Contrib.AsyncDisposable.DisposeAsync">
            <summary>
                Calls the disposal function if and only if the current instance hasn't been disposed yet.
            </summary>
            <returns>
              A <see cref="T:System.Threading.Tasks.Task"/> representing the outcome of the operation.
            </returns>
        </member>
        <member name="T:Rx.Contrib.AwaitableSubscription`1">
            <summary>
                Provides a set of static methods for subscribing delegates to observable and add the possbility
                for waiting the end of the subcription, occured when the observable is completed or an error is produced.
            </summary>
            <remarks>
                Don't forget the Rx grammer for asynchronous sequences of data : OnNext* (OnCompleted|OnError)?
            </remarks>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action{System.Exception})">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onCompleted">
                Action to invoke upon graceful termination of the observable sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="onCompleted">
                Action to invoke upon graceful termination of the observable sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.IObserver{`0},System.Threading.CancellationToken)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="observer">
                Observer to subscribe to the sequence.
            </param>
            <param name="token">
                CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Threading.CancellationToken)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="token">
                CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="token">
                CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.AwaitableSubscription`1" /> class.
            </summary>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="onCompleted">
                Action to invoke upon graceful termination of the observable sequence.
            </param>
            <param name="token">
                CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.Await">
            <summary>
                Waits for the subscription is completed or an error occured.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing the outcome of the operation.
            </returns>
        </member>
        <member name="M:Rx.Contrib.AwaitableSubscription`1.DisposeAsync">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
              asynchronously.
            </summary>
            <returns>
              A <see cref="T:System.Threading.Tasks.Task" /> representing the outcome of the operation.
            </returns>
        </member>
        <member name="T:Rx.Contrib.IAsyncDisposable">
            <summary>
              Defines an asynchronous method to release allocated resources.
            </summary>
        </member>
        <member name="M:Rx.Contrib.IAsyncDisposable.DisposeAsync">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
              asynchronously.
            </summary>
            <returns>
              A <see cref="T:System.Threading.Tasks.Task" /> representing the outcome of the operation.
            </returns>
        </member>
        <member name="T:Rx.Contrib.IAwaitableSubscription">
            <summary>
                Define the contract of a subscription that you can wait for.
            </summary>
        </member>
        <member name="M:Rx.Contrib.IAwaitableSubscription.Await">
            <summary>
                Waits for the subscription is completed or an error occured.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing the outcome of the operation.
            </returns>
        </member>
        <member name="T:Rx.Contrib.ObservableExtensions">
            <summary>
              Add some useful methods for Rx.
            </summary>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.Await``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
            <summary>
              Returns an <see cref="T:System.IObservable`1" /> containing the result of the <paramref name="source" /> task.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              The <see cref="T:System.Threading.Tasks.Task" /> representing an asynchronous operation.
            </param>
            <returns>
              A new <see cref="T:System.IObservable`1" /> which completes when the <paramref name="source" /> task is finished.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0})">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0})">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
              Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <param name="onCompleted">
              Action to invoke upon graceful termination of the observable sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
              Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="onCompleted">
              Action to invoke upon graceful termination of the observable sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.IObserver{``0},System.Threading.CancellationToken)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="observer">
              Observer to subscribe to the sequence.
            </param>
            <param name="token">
              CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="token">
              CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
              Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="token">
              CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.AwaitableSubscription``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <summary>
              Returns an <see cref="T:Rx.Contrib.IAsyncDisposable" /> that you can wait for until the subscription on the
              <paramref name="source" /> is disposed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
              Source sequence to propagate elements for.
            </param>
            <param name="onNext">
              Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
              Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="onCompleted">
              Action to invoke upon graceful termination of the observable sequence.
            </param>
            <param name="token">
              CancellationToken that can be signaled to unsubscribe from the source sequence.
            </param>
            <returns>
              An instance of <see cref="T:Rx.Contrib.IAsyncDisposable" /> awaitable.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.BlockUntil``1(System.IObservable{``0},System.Threading.Tasks.Task)">
            <summary>
                Blocks the completion of the <paramref name="source"/> until the <paramref name="task"/>
                is finished.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to block.
            </param>
            <param name="task">
                Task to wait for.
            </param>
            <returns>
                A new <see cref="T:System.IObservable`1"/> which completes when the <paramref name="source"/>
                and <paramref name="task"/> are finished.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.ConcatUntilAny``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
                Concatenates <paramref name="observables"/> sequence to each other sequence until an <see cref="T:System.IObservable`1"/> yields at least 1 message.
            </summary>
            <param name="observables">
                <see cref="T:System.IObservable`1"/> to be concatenated.
            </param>
            <typeparam name="TSource">
                The generic type of the <paramref name="observables"/>.
            </typeparam>
            <returns>
                An <see cref="T:System.IObservable`1"/> sequence that contains the elements of the first sequence yielding at least one message, followed by those of next sequences.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.IntervalStartAtBegining(System.TimeSpan)">
            <summary>
              Starts an observable with an <paramref name="interval" /> yielding the first message at the beginning.
            </summary>
            <param name="interval">
              Period for producing the values in the resulting sequence. If this value is equal to TimeSpan.Zero, the timer will
              recur as fast as possible.
            </param>
            <returns>
              An observable sequence that produces a value at the beginning and after each period.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.Retry``2(System.IObservable{``0})">
            <summary>
                Repeats the source observable sequence until it successfully terminates when the <typeparamref name="TException"/> occurred.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TException">
                The exception type which will be caught.
            </typeparam>
            <param name="source">
                Observable sequence to repeat until it successfully terminates.
            </param>
            <returns>
                An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully when the <typeparamref name="TException"/> occurred.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.Retry``2(System.IObservable{``0},System.Func{``1,System.Boolean})">
            <summary>
                Retries if there is an <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TException">
                The type of exception on which it should retry.
            </typeparam>
            <param name="source">
                Source sequence to retry in case of an <typeparamref name="TException"/>.
            </param>
            <param name="where">
                Filter is applied to catched exceptions.
            </param>
            <returns>
                An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully or with a different exception.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.Retry``2(System.IObservable{``0},System.Int32)">
            <summary>
                Retries if there is an <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TException">
                The type of exception on which it should retry.
            </typeparam>
            <param name="source">
                Source sequence to retry in case of an <typeparamref name="TException"/>.
            </param>
            <param name="maxRetry">
                How many times to retry.
            </param>
            <returns>
                An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully or with a different exception.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.Retry``2(System.IObservable{``0},System.Int32,System.TimeSpan)">
            <summary>
                Retries if there is an <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TException">
                The type of exception on which it should retry.
            </typeparam>
            <param name="source">
                Source sequence to retry in case of an <typeparamref name="TException"/>.
            </param>
            <param name="maxRetry">
                How many times to retry.
            </param>
            <param name="after">
                The delay when the observable will be re-executed.
            </param>
            <returns>
                An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully or with a different exception.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SelectAsyncCancelling``2(System.IObservable{``0},System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
                Projects each element of an observable sequence into a new form, new source sequence elements cancel old uncompleted tasks returned by the previous call to <paramref name="selector"/> and filters uncompleted transformations.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
                The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.
            </typeparam>
            <param name="source">
                A sequence of elements to invoke a transform function on.
            </param>
            <param name="selector">
                A transform function to apply to each source element.
            </param>
            <returns>
                An observable sequence whose elements are the result of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SelectAsyncParallel``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
                Projects each element of an observable sequence into a new form, <paramref name="selector"/> is executed in parallel.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
                The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam><param name="source">A sequence of elements to invoke a transform function on.
            </param>
            <param name="selector">
                A transform function to apply to each source element.
            </param>
            <returns>
                An observable sequence whose elements are the result of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SelectAsyncSequentially``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
                Projects each element of an observable sequence into a new form, source sequence elements are queued until the task returned by the previous call to <paramref name="selector"/> is completed.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
                The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam><param name="source">A sequence of elements to invoke a transform function on.
            </param>
            <param name="selector">
                A transform function to apply to each source element.
            </param>
            <returns>
                An observable sequence whose elements are the result of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SelectAsyncSkipping``2(System.IObservable{``0},System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
              Projects each element of an observable sequence into a new form, source sequence elements are ignored until
              the task returned by the previous call to <paramref name="selector" /> is completed.
            </summary>
            <typeparam name="TSource">
              The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
              The type of the elements in the result sequence, obtained by running the selector function for each element in the
              source sequence.
            </typeparam>
            <param name="source">
              A sequence of elements to invoke a transform function on.
            </param>
            <param name="selector">
              A transform function to apply to each source element.
            </param>
            <returns>
              An observable sequence whose elements are the result of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source" /> or <paramref name="selector" /> is null.
            </exception>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0})">
            <summary>
                Subscribes to an observable which was created with <see cref="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})"/>.
                It sends an cancellation request on disposal and waits for the observable to complete.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to subscribe to.
            </param>
            <returns>
                An async disposable which sends an cancellation request on disposal and waits for the observable to complete.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0},System.Action{``0})">
            <summary>
                Subscribes to an observable which was created with <see cref="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})"/>.
                It sends an cancellation request on disposal and waits for the observable to complete.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to subscribe to.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <returns>
                An async disposable which sends an cancellation request on disposal and waits for the observable to complete.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
                Subscribes to an observable which was created with <see cref="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})"/>.
                It sends an cancellation request on disposal and waits for the observable to complete.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to subscribe to.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <returns>
                An async disposable which sends an cancellation request on disposal and waits for the observable to complete.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
                Subscribes to an observable which was created with <see cref="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})"/>.
                It sends an cancellation request on disposal and waits for the observable to complete.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to subscribe to.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onCompleted">
                Action to invoke upon graceful termination of the observable sequence.
            </param>
            <returns>
                An async disposable which sends an cancellation request on disposal and waits for the observable to complete.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
                Subscribes to an observable which was created with <see cref="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})"/>.
                It sends an cancellation request on disposal and waits for the observable to complete.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to subscribe to.
            </param>
            <param name="onNext">
                Action to invoke for each element in the observable sequence.
            </param>
            <param name="onError">
                Action to invoke upon exceptional termination of the observable sequence.
            </param>
            <param name="onCompleted">
                Action to invoke upon graceful termination of the observable sequence.
            </param>
            <returns>
                An async disposable which sends an cancellation request on disposal and waits for the observable to complete.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.TakeUntil``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the elements from the source observable sequence until the <paramref name="predicate"/> is true. 
                In difference to TakeWhile this method returns the item which matches the predicate.
            </summary>
            <typeparam name="TSource">
                The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
                Source sequence to propagate elements for.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <returns>
                An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
            </returns>
        </member>
        <member name="M:Rx.Contrib.ObservableExtensions.CreateWithCancellationSupport``1(System.Action{System.IObserver{``0},System.Threading.CancellationToken})">
            <summary>
                Creates an observable sequence with the possibility to get a subscription where the observable can be notified to stop producing items.
                Use any of the <see cref="M:Rx.Contrib.ObservableExtensions.SubscribeWithCancellationSupport``1(System.IObservable{``0})"/> methods to get an <see cref="T:Rx.Contrib.IAsyncDisposable"/>.
            </summary>
            <typeparam name="TResult">
                The type of items which is returned by the new observable.
            </typeparam>
            <param name="subscribe">
                The method which is called upon subscription.
            </param>
            <returns>
                An observable sequence with the possibility to get a subscription where the observable can be notified to stop producing items.
            </returns>
        </member>
        <member name="T:Rx.Contrib.ObserverWithCancellationSupport`1">
            <summary>
                Observer which holds a task completion source which can be used to request observable completion.
            </summary>
            <typeparam name="TSource">
                The source type.
            </typeparam>
        </member>
        <member name="T:Rx.Contrib.ValueHolder`1">
            <summary>
              Model wrapping a message yielded by an observable.
            </summary>
            <typeparam name="TSource">
              The source type.
            </typeparam>
        </member>
        <member name="M:Rx.Contrib.ValueHolder`1.#ctor(`0,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.ValueHolder`1" /> struct.
            </summary>
            <param name="o">
              Message wrapped by this struct.
            </param>
            <param name="ignore">
              Determines if the message has to be ignored or not.
            </param>
        </member>
        <member name="M:Rx.Contrib.ValueHolder`1.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Rx.Contrib.ValueHolder`1" /> struct.
            </summary>
            <param name="ignore">
              Determines if the message has to be ignored or not.
            </param>
        </member>
        <member name="P:Rx.Contrib.ValueHolder`1.Ignore">
            <summary>
              Gets a value indicating whether the message has to be ignored or not.
            </summary>
        </member>
        <member name="P:Rx.Contrib.ValueHolder`1.Value">
            <summary>
              Gets the message wrapped.
            </summary>
        </member>
    </members>
</doc>
